[{"/app/src/index.tsx":"1","/app/src/App.tsx":"2","/app/src/pages/Login.tsx":"3","/app/src/pages/Register.tsx":"4","/app/src/pages/PostPage.tsx":"5","/app/src/pages/Home.tsx":"6","/app/src/pages/Profile.tsx":"7","/app/src/context/authContext.tsx":"8","/app/src/components/MenuBar.tsx":"9","/app/src/hoc/UnPrivateRoute.tsx":"10","/app/src/components/Post.tsx":"11","/app/src/components/PostComment.tsx":"12","/app/src/graphql/user/query.ts":"13","/app/src/graphql/post/query.ts":"14","/app/src/graphql/user/mutation.ts":"15","/app/src/graphql/comment/mutation.ts":"16","/app/src/components/CreatePostModal.tsx":"17","/app/src/components/ProfileCard.tsx":"18","/app/src/graphql/post/mutation.ts":"19","/app/src/components/EditProfileModal.tsx":"20"},{"size":1167,"mtime":1609681837286,"results":"21","hashOfConfig":"22"},{"size":1103,"mtime":1609638701292,"results":"23","hashOfConfig":"22"},{"size":2598,"mtime":1609631216143,"results":"24","hashOfConfig":"22"},{"size":4685,"mtime":1609690395494,"results":"25","hashOfConfig":"22"},{"size":3715,"mtime":1609690441352,"results":"26","hashOfConfig":"22"},{"size":2216,"mtime":1609694043038,"results":"27","hashOfConfig":"22"},{"size":5950,"mtime":1609693940799,"results":"28","hashOfConfig":"22"},{"size":1808,"mtime":1609694325326,"results":"29","hashOfConfig":"22"},{"size":2326,"mtime":1609694229812,"results":"30","hashOfConfig":"22"},{"size":541,"mtime":1609520844314,"results":"31","hashOfConfig":"22"},{"size":3689,"mtime":1609694178830,"results":"32","hashOfConfig":"22"},{"size":912,"mtime":1609620319462,"results":"33","hashOfConfig":"22"},{"size":1788,"mtime":1609694240573,"results":"34","hashOfConfig":"22"},{"size":1072,"mtime":1609680524661,"results":"35","hashOfConfig":"22"},{"size":1198,"mtime":1609628658249,"results":"36","hashOfConfig":"22"},{"size":345,"mtime":1609549272922,"results":"37","hashOfConfig":"22"},{"size":2723,"mtime":1609630607561,"results":"38","hashOfConfig":"22"},{"size":4181,"mtime":1609686759200,"results":"39","hashOfConfig":"22"},{"size":422,"mtime":1609554034217,"results":"40","hashOfConfig":"22"},{"size":3078,"mtime":1609690426016,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"xa1dw3",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"45"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"45"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},"/app/src/index.tsx",["96"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  gql,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  link: createHttpLink({\n    uri: \"http://localhost:5000/graphql\",\n    credentials: \"include\",\n  }),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          postsPagination: {\n            keyArgs: false,\n            merge(existing, incoming, arg) {\n              const merged = existing ? existing.slice(0) : [];\n              const offset = arg.args?.offset ? arg.args.offset : 0;\n\n              for (let i = 0; i < incoming.length; i++) {\n                merged[offset + i] = incoming[i];\n              }\n              return merged;\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["97","98"],"/app/src/App.tsx",["99"],"import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\nimport MenuBar from \"./components/MenuBar\";\nimport { AuthProvider } from \"./context/authContext\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport PrivateRoute from \"./hoc/PrivateRoute\";\nimport UnPrivateRoute from \"./hoc/UnPrivateRoute\";\nimport Profile from \"./pages/Profile\";\nimport PostPage from \"./pages/PostPage\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AuthProvider>\n        <Router>\n          <Container>\n            <MenuBar />\n            <Route exact path=\"/\" component={Home} />\n            <UnPrivateRoute exact path=\"/login\" component={Login} />\n            <UnPrivateRoute exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile/:handle\" component={Profile} />\n            <Route exact path=\"/post/:id\" component={PostPage} />\n          </Container>\n        </Router>\n      </AuthProvider>\n    </div>\n  );\n}\n\nexport default App;\n","/app/src/pages/Login.tsx",["100","101","102"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Button, Form, InputOnChangeData } from \"semantic-ui-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { LOGIN_MUTATION } from \"../graphql/user/mutation\";\r\nimport { LoginType } from \"../type/UserType\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    setValue,\r\n    trigger,\r\n  } = useForm<LoginType>();\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const history = useHistory();\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    register(\r\n      { name: \"email\" },\r\n      {\r\n        required: \"Email is required\",\r\n        pattern: {\r\n          value: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n          message: \"Invalid email address\",\r\n        },\r\n      }\r\n    );\r\n    register({ name: \"password\" }, { required: \"Password is required\" });\r\n  }, []);\r\n\r\n  const onSubmit = handleSubmit(async (data) => {\r\n    setLoading(true);\r\n    const res: any = await authContext.login(data);\r\n\r\n    if (res.data) {\r\n      history.push(`/profile/${res.data.login.handle}`);\r\n    } else if (res.errors) {\r\n      setError(res.errors[0].message);\r\n    }\r\n\r\n    setLoading(false);\r\n  });\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <Form onSubmit={onSubmit}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email\"\r\n          name=\"email\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.email ? errors.email.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.password ? errors.password.message : false}\r\n        />\r\n        <Button type=\"submit\" primary loading={loading}>\r\n          Login\r\n        </Button>\r\n        {error && <p className=\"error-msg\">{error}</p>}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","/app/src/pages/Register.tsx",["103","104"],"import { useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Form, InputOnChangeData } from \"semantic-ui-react\";\r\nimport { REGISTER_MUTATION } from \"../graphql/user/mutation\";\r\nimport { RegisterType } from \"../type/UserType\";\r\n\r\nfunction Register() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    setValue,\r\n    trigger,\r\n  } = useForm<RegisterType>();\r\n  const [registerMutation, { loading, error, data }] = useMutation(\r\n    REGISTER_MUTATION,\r\n    {\r\n      errorPolicy: \"all\",\r\n    }\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    register(\r\n      { name: \"email\" },\r\n      {\r\n        required: \"Email is required\",\r\n        pattern: {\r\n          value: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n          message: \"Invalid email address\",\r\n        },\r\n      }\r\n    );\r\n    register({ name: \"password\" }, { required: \"Password is required\" });\r\n    register({ name: \"firstName\" }, { required: \"First name is required\" });\r\n    register({ name: \"lastName\" }, { required: \"Last name is required\" });\r\n    register({ name: \"handle\" }, { required: \"Handle is required\" });\r\n    register({ name: \"age\" }, { required: \"Age is required\" });\r\n  }, []);\r\n\r\n  const onSubmit = handleSubmit((data) => {\r\n    registerMutation({\r\n      variables: { ...data, age: parseFloat(data.age) },\r\n    });\r\n  });\r\n\r\n  if (data) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  let errorMsg = \"\";\r\n  if (error) {\r\n    const graphqlError =\r\n      error.graphQLErrors[0].extensions?.exception.validationErrors[0]\r\n        .constraints;\r\n    if (graphqlError) {\r\n      for (const [key, value] of Object.entries(graphqlError)) {\r\n        errorMsg = value as string;\r\n      }\r\n    } else {\r\n      errorMsg = error.message;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-page-container\">\r\n      <Form onSubmit={onSubmit}>\r\n        <h1>Sign Up</h1>\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email\"\r\n          name=\"email\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.email ? errors.email.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.password ? errors.password.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"Handle\"\r\n          placeholder=\"Handle\"\r\n          name=\"handle\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.handle ? errors.handle.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"First Name\"\r\n          placeholder=\"First Name\"\r\n          name=\"firstName\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.firstName ? errors.firstName.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"Last Name\"\r\n          placeholder=\"Last Name\"\r\n          name=\"lastName\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.lastName ? errors.lastName.message : false}\r\n        />\r\n        <Form.Input\r\n          label=\"Age\"\r\n          placeholder=\"Age\"\r\n          name=\"age\"\r\n          type=\"number\"\r\n          autoComplete=\"off\"\r\n          onChange={async (_: any, { name, value }: InputOnChangeData) => {\r\n            setValue(name, value);\r\n            await trigger(name);\r\n          }}\r\n          error={errors.age ? errors.age.message : false}\r\n        />\r\n        <Button type=\"submit\" primary loading={loading}>\r\n          Sign Up\r\n        </Button>\r\n        {error && <p className=\"error-msg\">{errorMsg}</p>}\r\n        <div className=\"padding-3\"></div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","/app/src/pages/PostPage.tsx",["105","106","107","108"],"import { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { FormEvent, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Segment,\r\n  Comment,\r\n  Loader,\r\n  Dimmer,\r\n  FormProps,\r\n} from \"semantic-ui-react\";\r\nimport Post from \"../components/Post\";\r\nimport PostComment from \"../components/PostComment\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport { CREATE_COMMENT_MUTATION } from \"../graphql/comment/mutation\";\r\nimport {\r\n  RETRIEVE_POST_COMMENTS_QUERY,\r\n  RETRIEVE_POST_QUERY,\r\n} from \"../graphql/post/query\";\r\n\r\ninterface RetrievePostVar {\r\n  id: number;\r\n}\r\n\r\ninterface CreateCommentVar {\r\n  postId: number;\r\n  message: string;\r\n}\r\n\r\nfunction PostPage(props: any) {\r\n  const postId: number = parseFloat(props.match.params.id);\r\n\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const [commentMsg, setCommentMsg] = useState<string>(\"\");\r\n\r\n  const { loading, error, data, refetch } = useQuery<any, RetrievePostVar>(\r\n    RETRIEVE_POST_QUERY,\r\n    {\r\n      variables: { id: postId },\r\n      fetchPolicy: \"cache-and-network\",\r\n      nextFetchPolicy: \"cache-first\",\r\n    }\r\n  );\r\n  const [retrieveComments, { data: commentsData }] = useLazyQuery<\r\n    any,\r\n    RetrievePostVar\r\n  >(RETRIEVE_POST_COMMENTS_QUERY, {\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-first\",\r\n  });\r\n  const [createCommentMutation] = useMutation<any, CreateCommentVar>(\r\n    CREATE_COMMENT_MUTATION\r\n  );\r\n\r\n  const handleCreateComment = async () => {\r\n    if (commentMsg.length) {\r\n      await createCommentMutation({\r\n        variables: {\r\n          postId: postId,\r\n          message: commentMsg,\r\n        },\r\n      });\r\n      retrieveComments({\r\n        variables: {\r\n          id: postId,\r\n        },\r\n      });\r\n      setCommentMsg(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    retrieveComments({\r\n      variables: {\r\n        id: postId,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  if (error) return <h1>Error: {error.message}</h1>;\r\n\r\n  return (\r\n    <div className=\"margin-top-container\">\r\n      <Grid centered>\r\n        <Grid.Column width={10}>\r\n          <Post\r\n            loading={loading}\r\n            data={data?.retrievePost}\r\n            comments={commentsData?.retrievePost.comments}\r\n            refetch={refetch}\r\n          />\r\n          <Segment>\r\n            <h4>Post a comment</h4>\r\n            <Form reply onSubmit={handleCreateComment}>\r\n              <Form.TextArea\r\n                className=\"unresizable\"\r\n                placeholder={\r\n                  authContext.me ? \"Your comment...\" : \"Login to write comments\"\r\n                }\r\n                value={commentMsg}\r\n                onChange={(e) => setCommentMsg(e.target.value)}\r\n                autoFocus\r\n                disabled={!authContext.me}\r\n              />\r\n              <Button\r\n                content=\"Submit\"\r\n                labelPosition=\"left\"\r\n                icon=\"edit\"\r\n                primary\r\n                disabled={!authContext.me}\r\n              />\r\n            </Form>\r\n          </Segment>\r\n          <Comment.Group>\r\n            <Header as=\"h3\" dividing>\r\n              Comments\r\n            </Header>\r\n            {loading ? (\r\n              <Loader active inline=\"centered\">\r\n                Loading...\r\n              </Loader>\r\n            ) : (\r\n              <>\r\n                {commentsData &&\r\n                  commentsData.retrievePost.comments.map((data: any) => {\r\n                    return <PostComment data={data} />;\r\n                  })}\r\n              </>\r\n            )}\r\n          </Comment.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostPage;\r\n","/app/src/pages/Home.tsx",["109","110","111","112","113"],"import { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport Post from \"../components/Post\";\r\nimport { Dimmer, Grid, Loader, Segment } from \"semantic-ui-react\";\r\nimport { POSTS_PAGINATION_QUERY } from \"../graphql/post/query\";\r\n\r\ninterface PostsPaginationVar {\r\n  offset: number;\r\n  limit: number;\r\n}\r\n\r\nconst LIMIT = 5;\r\n\r\nfunction Home() {\r\n  const [offset, setOffset] = useState<number>(0);\r\n\r\n  const { loading, data, fetchMore } = useQuery<any, PostsPaginationVar>(\r\n    POSTS_PAGINATION_QUERY,\r\n    {\r\n      variables: {\r\n        offset: offset,\r\n        limit: LIMIT,\r\n      },\r\n      fetchPolicy: \"cache-and-network\",\r\n      nextFetchPolicy: \"cache-first\",\r\n    }\r\n  );\r\n  const dataRef = useRef(data);\r\n  const loadingRef = useRef(loading);\r\n\r\n  useEffect(() => {\r\n    checkPagination();\r\n    window.addEventListener(\"scroll\", checkPagination);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", checkPagination);\r\n    };\r\n  }, []);\r\n\r\n  const checkPagination = async () => {\r\n    const scrollPos = window.innerHeight + window.scrollY;\r\n    const scrollHeight = document.body.scrollHeight;\r\n\r\n    if (loadingRef.current) return null;\r\n\r\n    if (scrollPos >= scrollHeight - 300) {\r\n      setOffset((prevOffset) => {\r\n        if (\r\n          dataRef.current &&\r\n          dataRef.current.postsPagination.length < prevOffset\r\n        ) {\r\n          return prevOffset;\r\n        }\r\n\r\n        const nextOffset = prevOffset + LIMIT;\r\n        fetchMore({\r\n          variables: {\r\n            offset: nextOffset,\r\n            limit: LIMIT,\r\n          },\r\n        });\r\n        return nextOffset;\r\n      });\r\n    }\r\n  };\r\n\r\n  if (data) dataRef.current = data;\r\n  loadingRef.current = loading;\r\n\r\n  return (\r\n    <div className=\"margin-top-container\">\r\n      <Grid centered>\r\n        <Grid.Column width={10}>\r\n          {data?.postsPagination.map((data: any) => {\r\n            return <Post loading={false} data={data} />;\r\n          })}\r\n          {loading && <Loader active inline=\"centered\" />}\r\n          <div className=\"padding-3\"></div>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","/app/src/pages/Profile.tsx",["114","115","116","117","118","119","120"],"import { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Dimmer,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Image,\r\n  Loader,\r\n  Menu,\r\n  MenuItemProps,\r\n  Placeholder,\r\n  Ref,\r\n  Segment,\r\n  Sticky,\r\n  Comment,\r\n} from \"semantic-ui-react\";\r\nimport CreatePostModal from \"../components/CreatePostModal\";\r\nimport Post from \"../components/Post\";\r\nimport PostComment from \"../components/PostComment\";\r\nimport ProfileCard from \"../components/ProfileCard\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport {\r\n  COMMENTED_QUERY,\r\n  RETRIEVE_USER_QUERY,\r\n  UPVOTED_QUERY,\r\n} from \"../graphql/user/query\";\r\nimport { RetrieveUserType } from \"../type/UserType\";\r\n\r\ninterface UserDataType {\r\n  retrieveUser: RetrieveUserType;\r\n}\r\n\r\ninterface RetrieveUserVar {\r\n  handle: string;\r\n}\r\n\r\nfunction Profile(props: any) {\r\n  const profileHandle = props.match.params.handle;\r\n\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const contextRef = useRef(null);\r\n  const [activeItem, setActiveItem] = useState<string | undefined>(\"feed\");\r\n  const [meProfile, setMeProfile] = useState<boolean>(false);\r\n\r\n  const { loading, data, refetch } = useQuery<UserDataType, RetrieveUserVar>(\r\n    RETRIEVE_USER_QUERY,\r\n    {\r\n      variables: { handle: profileHandle },\r\n      fetchPolicy: \"cache-and-network\",\r\n      nextFetchPolicy: \"cache-first\",\r\n    }\r\n  );\r\n  const [\r\n    upvoted,\r\n    { loading: upvotedLoading, data: upvotedData },\r\n  ] = useLazyQuery<any, RetrieveUserVar>(UPVOTED_QUERY, {\r\n    variables: { handle: profileHandle },\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-first\",\r\n  });\r\n  const [\r\n    commented,\r\n    { loading: commentedLoading, data: commentedData },\r\n  ] = useLazyQuery<any, RetrieveUserVar>(COMMENTED_QUERY, {\r\n    variables: { handle: profileHandle },\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-first\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (authContext.me) {\r\n      setMeProfile(authContext.me.handle === profileHandle);\r\n    }\r\n  }, [authContext.me, profileHandle]);\r\n\r\n  const handleFeed = () => {\r\n    refetch();\r\n    setActiveItem(\"feed\");\r\n  };\r\n\r\n  const handleLiked = () => {\r\n    upvoted({\r\n      variables: {\r\n        handle: profileHandle,\r\n      },\r\n    });\r\n    setActiveItem(\"liked\");\r\n  };\r\n\r\n  const handleCommented = () => {\r\n    commented({\r\n      variables: {\r\n        handle: profileHandle,\r\n      },\r\n    });\r\n    setActiveItem(\"commented\");\r\n  };\r\n\r\n  let postsBody = null;\r\n  if (loading || upvotedLoading || commentedLoading) {\r\n    postsBody = (\r\n      <Dimmer inverted active>\r\n        <Loader />\r\n      </Dimmer>\r\n    );\r\n  } else {\r\n    let postsData = null;\r\n    let noPostsMsg = \"No posts yet\";\r\n    let commentsData = null;\r\n\r\n    switch (activeItem) {\r\n      case \"feed\":\r\n        postsData = data?.retrieveUser.posts;\r\n        noPostsMsg = \"No posts yet\";\r\n        break;\r\n      case \"liked\":\r\n        postsData = upvotedData?.upvoted.upvotes;\r\n        noPostsMsg = \"No liked posts yet\";\r\n        break;\r\n      case \"commented\":\r\n        commentsData = commentedData?.commented.comments;\r\n        break;\r\n    }\r\n\r\n    if (postsData) {\r\n      if (postsData.length) {\r\n        postsBody = (\r\n          <>\r\n            {postsData.map((data: any) => {\r\n              return <Post loading={loading} data={data} />;\r\n            })}\r\n          </>\r\n        );\r\n      } else {\r\n        postsBody = (\r\n          <Header as=\"h2\" textAlign=\"center\" disabled>\r\n            {noPostsMsg}\r\n          </Header>\r\n        );\r\n      }\r\n    } else if (commentsData) {\r\n      console.log(commentsData);\r\n      if (commentsData.length) {\r\n        postsBody = (\r\n          <>\r\n            {commentsData.map((data: any) => {\r\n              return (\r\n                <>\r\n                  <Post loading={loading} data={data.post} />\r\n                  <Comment.Group>\r\n                    <PostComment data={data} />\r\n                  </Comment.Group>\r\n                </>\r\n              );\r\n            })}\r\n          </>\r\n        );\r\n      } else {\r\n        postsBody = (\r\n          <Header as=\"h2\" textAlign=\"center\" disabled>\r\n            No comments yet\r\n          </Header>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"margin-top-container\">\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={5} stretched>\r\n            <Ref innerRef={contextRef}>\r\n              <Sticky context={contextRef} offset={15}>\r\n                <ProfileCard\r\n                  meProfile={meProfile}\r\n                  loading={loading}\r\n                  data={data ? data.retrieveUser : null}\r\n                  refetch={refetch}\r\n                />\r\n              </Sticky>\r\n            </Ref>\r\n          </Grid.Column>\r\n          <Grid.Column width={11}>\r\n            <Menu attached=\"top\" tabular>\r\n              <Menu.Item\r\n                name=\"feed\"\r\n                active={activeItem === \"feed\"}\r\n                onClick={handleFeed}\r\n              />\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item\r\n                  name=\"liked\"\r\n                  active={activeItem === \"liked\"}\r\n                  onClick={handleLiked}\r\n                />\r\n                <Menu.Item\r\n                  name=\"commented\"\r\n                  active={activeItem === \"commented\"}\r\n                  onClick={handleCommented}\r\n                />\r\n              </Menu.Menu>\r\n            </Menu>\r\n            <Segment attached=\"bottom\">\r\n              {meProfile && activeItem === \"feed\" && (\r\n                <CreatePostModal loading={loading} refetch={refetch} />\r\n              )}\r\n              <br></br>\r\n              <br></br>\r\n              {postsBody}\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","/app/src/context/authContext.tsx",["121","122","123","124"],"import { useLazyQuery, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { createContext, useEffect, useState } from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\nimport { LOGIN_MUTATION, LOGOUT_MUTATION } from \"../graphql/user/mutation\";\r\nimport { IS_AUTH_QUERY, ME_QUERY } from \"../graphql/user/query\";\r\nimport { LoginType } from \"../type/UserType\";\r\n\r\ntype MeType = {\r\n  id: number;\r\n  handle: string;\r\n  fullName: string;\r\n};\r\n\r\ninterface AuthContextType {\r\n  me: MeType | null;\r\n  login: (data: LoginType) => void;\r\n  logout: () => void;\r\n}\r\n\r\nconst initialContext: AuthContextType = {\r\n  me: null,\r\n  login: (data: LoginType) => {},\r\n  logout: () => {},\r\n};\r\n\r\nconst AuthContext = createContext(initialContext);\r\n\r\nfunction AuthProvider({ children }: any) {\r\n  const [loginMutation] = useMutation(LOGIN_MUTATION, {\r\n    errorPolicy: \"all\",\r\n  });\r\n  const [logoutMutation] = useMutation(LOGOUT_MUTATION);\r\n  const { loading, data: meData, refetch } = useQuery(ME_QUERY, {\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-first\",\r\n  });\r\n\r\n  const login = async (data: LoginType) => {\r\n    const res = await loginMutation({\r\n      variables: data,\r\n    });\r\n\r\n    await refetch();\r\n    return res;\r\n  };\r\n\r\n  const logout = async () => {\r\n    const res = await logoutMutation();\r\n\r\n    await refetch();\r\n    return res;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Dimmer active inverted>\r\n          <Loader size=\"large\" />\r\n        </Dimmer>\r\n      ) : (\r\n        <AuthContext.Provider\r\n          value={{\r\n            me: meData ? meData.me : null,\r\n            login,\r\n            logout,\r\n          }}\r\n        >\r\n          {children}\r\n        </AuthContext.Provider>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","/app/src/components/MenuBar.tsx",["125","126"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Menu, MenuItemProps, Placeholder, Segment } from \"semantic-ui-react\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nfunction MenuBar() {\r\n  const pathname = window.location.pathname;\r\n  let path = pathname.substr(1);\r\n  if (pathname === \"/\") path = \"home\";\r\n  if (pathname.substr(1, 7) === \"profile\") path = \"profile\";\r\n\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const history = useHistory();\r\n\r\n  const [activeItem, setActiveItem] = useState<string | undefined>(path);\r\n\r\n  const handleItemClick = (_: any, { name }: MenuItemProps) =>\r\n    setActiveItem(name);\r\n\r\n  const handleLogout = async (_: any, { name }: MenuItemProps) => {\r\n    setActiveItem(name);\r\n    await authContext.logout();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    setActiveItem(path);\r\n  }, [path]);\r\n\r\n  return (\r\n    <div>\r\n      <Menu pointing secondary size=\"huge\">\r\n        <Menu.Item\r\n          name=\"home\"\r\n          active={activeItem === \"home\"}\r\n          onClick={handleItemClick}\r\n          as={Link}\r\n          to=\"/\"\r\n        />\r\n        <Menu.Menu position=\"right\">\r\n          {authContext.me ? (\r\n            <>\r\n              <Menu.Item\r\n                name={authContext.me.fullName}\r\n                active={activeItem === \"profile\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to={`/profile/${authContext.me.handle}`}\r\n              />\r\n              <Menu.Item\r\n                name=\"logout\"\r\n                active={activeItem === \"logout\"}\r\n                onClick={handleLogout}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Menu.Item\r\n                name=\"login\"\r\n                active={activeItem === \"login\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/login\"\r\n              />\r\n              <Menu.Item\r\n                name=\"register\"\r\n                active={activeItem === \"register\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/register\"\r\n              />\r\n            </>\r\n          )}\r\n        </Menu.Menu>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MenuBar;\r\n","/app/src/hoc/UnPrivateRoute.tsx",[],"/app/src/components/Post.tsx",["127","128","129"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Header,\r\n  Icon,\r\n  Image,\r\n  Label,\r\n  Placeholder,\r\n} from \"semantic-ui-react\";\r\nimport { RetrievePostType } from \"../type/PostType\";\r\nimport { DateTime } from \"luxon\";\r\nimport { UPVOTE_MUTATION } from \"../graphql/post/mutation\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\ninterface UpvoteVar {\r\n  postId: number;\r\n}\r\n\r\ninterface UpvoteType {\r\n  id: number;\r\n}\r\n\r\ninterface UpvoteDataType {\r\n  numUpvotes: number;\r\n  didUpvote: boolean;\r\n}\r\n\r\ninterface PropType {\r\n  loading: boolean;\r\n  data: RetrievePostType;\r\n  comments?: any;\r\n  refetch?: any;\r\n}\r\n\r\nfunction Post({ loading, data, comments, refetch }: PropType) {\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const [upvoteMutation] = useMutation<any, UpvoteVar>(UPVOTE_MUTATION, {\r\n    errorPolicy: \"all\",\r\n  });\r\n\r\n  const [upvoteData, setUpvoteData] = useState<UpvoteDataType>({\r\n    numUpvotes: 0,\r\n    didUpvote: false,\r\n  });\r\n\r\n  const handleUpvote = async () => {\r\n    await upvoteMutation({\r\n      variables: { postId: data.id },\r\n    });\r\n    if (refetch) refetch();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const upvotes: UpvoteType[] = Array.from(new Set(data.upvotes));\r\n      let newUpvoteData: UpvoteDataType = {\r\n        numUpvotes: upvotes.length,\r\n        didUpvote: false,\r\n      };\r\n\r\n      if (authContext.me) {\r\n        let upvoted = upvotes.filter(\r\n          (upvote) => upvote.id === authContext.me!.id\r\n        );\r\n        if (upvoted.length) {\r\n          newUpvoteData.didUpvote = true;\r\n        }\r\n      }\r\n\r\n      setUpvoteData(newUpvoteData);\r\n    }\r\n  }, [authContext.me, data?.upvotes]);\r\n\r\n  if (loading)\r\n    return (\r\n      <Card fluid>\r\n        <Card.Content>\r\n          <Placeholder fluid>\r\n            <Placeholder.Header>\r\n              <Placeholder.Line length=\"short\" />\r\n              <Placeholder.Line length=\"very short\" />\r\n            </Placeholder.Header>\r\n            <Placeholder.Paragraph>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder.Paragraph>\r\n          </Placeholder>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Card.Header>\r\n          <Link to={`/post/${data.id}`} className=\"link-color\">\r\n            {data.title}\r\n          </Link>\r\n          <Link\r\n            to={`/profile/${data?.creator.handle}`}\r\n            className=\"mini-profile-wrapper\"\r\n          >\r\n            <span>{data?.creator.fullName}</span>\r\n            <Image\r\n              floated=\"right\"\r\n              size=\"small\"\r\n              src={data?.creator.profilePic}\r\n              avatar\r\n              bordered\r\n            />\r\n          </Link>\r\n        </Card.Header>\r\n        <Card.Meta>\r\n          {DateTime.fromISO(data.createdAt).toLocaleString({\r\n            month: \"short\",\r\n            day: \"numeric\",\r\n          })}\r\n        </Card.Meta>\r\n        <Card.Description>{data.content}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Label\r\n          as=\"a\"\r\n          onClick={handleUpvote}\r\n          {...(upvoteData.didUpvote ? { color: \"red\" } : \"\")}\r\n        >\r\n          <Icon name=\"heart\" />\r\n          {upvoteData.numUpvotes}\r\n        </Label>\r\n        <Label as={Link} to={`/post/${data.id}`}>\r\n          <Icon name=\"comment\" />\r\n          {comments ? comments.length : data.comments.length}\r\n        </Label>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","/app/src/components/PostComment.tsx",[],"/app/src/graphql/user/query.ts",[],"/app/src/graphql/post/query.ts",[],"/app/src/graphql/user/mutation.ts",[],"/app/src/graphql/comment/mutation.ts",[],"/app/src/components/CreatePostModal.tsx",["130","131"],"import { useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Header,\r\n  Modal,\r\n  Image,\r\n  Icon,\r\n  TextArea,\r\n  Form,\r\n  Input,\r\n} from \"semantic-ui-react\";\r\nimport { CREATE_POST_MUTATION } from \"../graphql/post/mutation\";\r\n\r\ninterface CreatePostVar {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\ninterface PropType {\r\n  loading: boolean;\r\n  refetch: any;\r\n}\r\n\r\nfunction ModalButton(profileLoading: boolean) {\r\n  return (\r\n    <Button\r\n      icon\r\n      as=\"div\"\r\n      labelPosition=\"left\"\r\n      color=\"blue\"\r\n      floated=\"right\"\r\n      disabled={profileLoading}\r\n    >\r\n      <Icon name=\"pencil\" />\r\n      Post\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction CreatePostModal({ loading: profileLoading, refetch }: PropType) {\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [createPostMutation] = useMutation<any, CreatePostVar>(\r\n    CREATE_POST_MUTATION\r\n  );\r\n\r\n  const handleClose = () => {\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n    setLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCreatePost = async () => {\r\n    if (title.length && content.length) {\r\n      setLoading(true);\r\n      await createPostMutation({\r\n        variables: {\r\n          title: title,\r\n          content: content,\r\n        },\r\n      });\r\n      await refetch();\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onClose={handleClose}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={ModalButton(profileLoading)}\r\n    >\r\n      <Modal.Header>Create a Post</Modal.Header>\r\n      <Modal.Content>\r\n        <Modal.Description>\r\n          <Form>\r\n            <Input\r\n              placeholder=\"Title\"\r\n              size=\"big\"\r\n              fluid\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <div className=\"padding-1\"></div>\r\n            <TextArea\r\n              placeholder=\"Write your post...\"\r\n              rows=\"10\"\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            />\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"black\" basic onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          color=\"blue\"\r\n          onClick={handleCreatePost}\r\n          loading={loading}\r\n          disabled={!title || !content}\r\n        >\r\n          Post\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CreatePostModal;\r\n","/app/src/components/ProfileCard.tsx",["132","133","134","135","136","137"],"import { ApolloQueryResult, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Card, Icon, Image, Placeholder } from \"semantic-ui-react\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport { FOLLOW_MUTATION } from \"../graphql/user/mutation\";\r\nimport { RETRIEVE_USER_QUERY } from \"../graphql/user/query\";\r\nimport { RetrieveUserType } from \"../type/UserType\";\r\nimport EditProfileModal from \"./EditProfileModal\";\r\n\r\ninterface FollowerDataType {\r\n  numFollowers: number;\r\n  didFollow: boolean;\r\n}\r\n\r\ninterface FollowerType {\r\n  id: number;\r\n}\r\n\r\ninterface FollowVar {\r\n  followUserId: number;\r\n}\r\n\r\ninterface PropType {\r\n  meProfile: boolean;\r\n  loading: boolean;\r\n  data: RetrieveUserType | null;\r\n  refetch: any;\r\n}\r\n\r\nfunction ProfileCard({ meProfile, loading, data, refetch }: PropType) {\r\n  const authContext = useContext(AuthContext);\r\n\r\n  const [followerData, setFollowerData] = useState<FollowerDataType>({\r\n    numFollowers: 0,\r\n    didFollow: false,\r\n  });\r\n\r\n  const [followMutation] = useMutation<any, FollowVar>(FOLLOW_MUTATION, {\r\n    errorPolicy: \"all\",\r\n  });\r\n\r\n  const handleFollow = async () => {\r\n    if (!meProfile && data) {\r\n      await followMutation({\r\n        variables: {\r\n          followUserId: data.id,\r\n        },\r\n      });\r\n      refetch();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const followers: FollowerType[] = Array.from(new Set(data.followers));\r\n      let newFollowerData: FollowerDataType = {\r\n        numFollowers: followers.length,\r\n        didFollow: false,\r\n      };\r\n\r\n      if (authContext.me) {\r\n        const follow = followers.filter(\r\n          (follower) => follower.id === authContext.me!.id\r\n        );\r\n        if (follow.length) newFollowerData.didFollow = true;\r\n      }\r\n\r\n      setFollowerData(newFollowerData);\r\n    }\r\n  }, [authContext.me, data?.followers]);\r\n\r\n  if (loading)\r\n    return (\r\n      <Card>\r\n        <Placeholder>\r\n          <Placeholder.Image square />\r\n        </Placeholder>\r\n        <Card.Content>\r\n          <Placeholder>\r\n            <Placeholder.Header>\r\n              <Placeholder.Line length=\"very short\" />\r\n              <Placeholder.Line length=\"medium\" />\r\n            </Placeholder.Header>\r\n            <Placeholder.Paragraph>\r\n              <Placeholder.Line length=\"short\" />\r\n              <Placeholder.Line length=\"long\" />\r\n              <Placeholder.Line length=\"medium\" />\r\n            </Placeholder.Paragraph>\r\n          </Placeholder>\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n\r\n  let interactButton = null;\r\n  if (meProfile) {\r\n    interactButton = (\r\n      <EditProfileModal\r\n        profilePic={data?.profilePic || \"\"}\r\n        bio={data?.bio || \"\"}\r\n        refetch={refetch}\r\n      />\r\n    );\r\n  } else if (!authContext.me) {\r\n    interactButton = null;\r\n  } else {\r\n    if (followerData.didFollow) {\r\n      interactButton = (\r\n        <a onClick={handleFollow}>\r\n          <Icon name=\"checkmark\" /> following\r\n        </a>\r\n      );\r\n    } else {\r\n      interactButton = (\r\n        <a onClick={handleFollow}>\r\n          <Icon name=\"user plus\" /> Follow\r\n        </a>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Image src={data?.profilePic} size=\"medium\" ui={false} wrapped bordered />\r\n      <Card.Content>\r\n        <Card.Header>\r\n          {data?.fullName}\r\n          <small className=\"float-right\">{interactButton}</small>\r\n        </Card.Header>\r\n        <Card.Meta>\r\n          {data && (\r\n            <span className=\"date\">\r\n              Joined in {new Date(data.createdAt).getFullYear()}\r\n            </span>\r\n          )}\r\n        </Card.Meta>\r\n        <Card.Description>{data?.bio}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div className=\"extra-wrapper\">\r\n          <span>\r\n            <strong>{followerData.numFollowers}</strong> Follower\r\n            {followerData.numFollowers === 1 ? \"\" : \"s\"}\r\n          </span>\r\n          <span>\r\n            <strong>{data?.following.length}</strong> Following\r\n          </span>\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ProfileCard;\r\n","/app/src/graphql/post/mutation.ts",[],"/app/src/components/EditProfileModal.tsx",["138","139","140","141","142","143","144"],"import { useMutation } from \"@apollo/client\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Image,\r\n  Header,\r\n  Icon,\r\n  TextArea,\r\n  Form,\r\n  Input,\r\n  Ref,\r\n} from \"semantic-ui-react\";\r\nimport { EDIT_USER_MUTATION } from \"../graphql/user/mutation\";\r\n\r\ninterface EditUserVar {\r\n  profilePic: string;\r\n  bio: string;\r\n}\r\n\r\ninterface PropType {\r\n  profilePic: string;\r\n  bio: string;\r\n  refetch: any;\r\n}\r\n\r\nfunction EditProfileButton() {\r\n  return (\r\n    <a>\r\n      <Icon name=\"edit\" /> Edit\r\n    </a>\r\n  );\r\n}\r\n\r\nfunction EditProfileModal({\r\n  profilePic: originalProfilePic,\r\n  bio: originalBio,\r\n  refetch,\r\n}: PropType) {\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const [picture, setPicture] = useState<string>(originalProfilePic);\r\n  const [bio, setBio] = useState<string>(originalBio);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const previewRef = useRef<HTMLImageElement>(null);\r\n\r\n  const [editUserMutation] = useMutation<any, EditUserVar>(EDIT_USER_MUTATION);\r\n\r\n  const handleEditUser = async () => {\r\n    setLoading(true);\r\n    let pictureLink = picture;\r\n    if (previewRef.current && previewRef.current.src !== picture)\r\n      pictureLink = previewRef.current.src;\r\n\r\n    await editUserMutation({\r\n      variables: { profilePic: pictureLink, bio: bio },\r\n    });\r\n    await refetch();\r\n    handleClose();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onClose={handleClose}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={EditProfileButton()}\r\n    >\r\n      <Modal.Header>Edit your Profile</Modal.Header>\r\n      <Modal.Content>\r\n        {/* <Ref innerRef={previewRef}> */}\r\n        <img\r\n          // size=\"medium\"\r\n          className=\"preview-img\"\r\n          ref={previewRef}\r\n          src={picture}\r\n          // wrapped\r\n          // bordered\r\n          onError={(e: any) => {\r\n            if (previewRef.current)\r\n              previewRef.current.src =\r\n                \"https://react.semantic-ui.com/images/wireframe/image.png\";\r\n          }}\r\n        />\r\n        {/* </Ref> */}\r\n\r\n        <Modal.Description style={{ width: \"100%\" }}>\r\n          <Form>\r\n            <Form.Input\r\n              label=\"Profile picture\"\r\n              placeholder=\"Link\"\r\n              value={picture}\r\n              onChange={(e) => setPicture(e.target.value)}\r\n            />\r\n            <Form.TextArea\r\n              label=\"Bio\"\r\n              rows=\"5\"\r\n              placeholder=\"Tell the world about yourself...\"\r\n              value={bio}\r\n              onChange={(e) => setBio(e.target.value)}\r\n            />\r\n          </Form>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button basic color=\"black\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleEditUser} color=\"blue\" loading={loading}>\r\n          Update\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default EditProfileModal;\r\n",{"ruleId":"145","severity":1,"message":"146","line":8,"column":3,"nodeType":"147","messageId":"148","endLine":8,"endColumn":6},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"145","severity":1,"message":"153","line":8,"column":8,"nodeType":"147","messageId":"148","endLine":8,"endColumn":20},{"ruleId":"145","severity":1,"message":"154","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":21},{"ruleId":"145","severity":1,"message":"155","line":5,"column":10,"nodeType":"147","messageId":"148","endLine":5,"endColumn":24},{"ruleId":"156","severity":1,"message":"157","line":37,"column":6,"nodeType":"158","endLine":37,"endColumn":8,"suggestions":"159"},{"ruleId":"156","severity":1,"message":"157","line":42,"column":6,"nodeType":"158","endLine":42,"endColumn":8,"suggestions":"160"},{"ruleId":"145","severity":1,"message":"161","line":60,"column":19,"nodeType":"147","messageId":"148","endLine":60,"endColumn":22},{"ruleId":"145","severity":1,"message":"162","line":2,"column":17,"nodeType":"147","messageId":"148","endLine":2,"endColumn":26},{"ruleId":"145","severity":1,"message":"163","line":11,"column":3,"nodeType":"147","messageId":"148","endLine":11,"endColumn":9},{"ruleId":"145","severity":1,"message":"164","line":12,"column":3,"nodeType":"147","messageId":"148","endLine":12,"endColumn":12},{"ruleId":"156","severity":1,"message":"165","line":81,"column":6,"nodeType":"158","endLine":81,"endColumn":8,"suggestions":"166"},{"ruleId":"145","severity":1,"message":"167","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":22},{"ruleId":"145","severity":1,"message":"168","line":2,"column":17,"nodeType":"147","messageId":"148","endLine":2,"endColumn":28},{"ruleId":"145","severity":1,"message":"163","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":16},{"ruleId":"145","severity":1,"message":"169","line":4,"column":32,"nodeType":"147","messageId":"148","endLine":4,"endColumn":39},{"ruleId":"156","severity":1,"message":"170","line":38,"column":6,"nodeType":"158","endLine":38,"endColumn":8,"suggestions":"171"},{"ruleId":"145","severity":1,"message":"172","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":14},{"ruleId":"145","severity":1,"message":"173","line":5,"column":3,"nodeType":"147","messageId":"148","endLine":5,"endColumn":9},{"ruleId":"145","severity":1,"message":"174","line":6,"column":3,"nodeType":"147","messageId":"148","endLine":6,"endColumn":7},{"ruleId":"145","severity":1,"message":"175","line":10,"column":3,"nodeType":"147","messageId":"148","endLine":10,"endColumn":7},{"ruleId":"145","severity":1,"message":"176","line":11,"column":3,"nodeType":"147","messageId":"148","endLine":11,"endColumn":8},{"ruleId":"145","severity":1,"message":"177","line":14,"column":3,"nodeType":"147","messageId":"148","endLine":14,"endColumn":16},{"ruleId":"145","severity":1,"message":"178","line":15,"column":3,"nodeType":"147","messageId":"148","endLine":15,"endColumn":14},{"ruleId":"145","severity":1,"message":"167","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":22},{"ruleId":"145","severity":1,"message":"179","line":2,"column":32,"nodeType":"147","messageId":"148","endLine":2,"endColumn":41},{"ruleId":"145","severity":1,"message":"180","line":2,"column":43,"nodeType":"147","messageId":"148","endLine":2,"endColumn":51},{"ruleId":"145","severity":1,"message":"181","line":5,"column":10,"nodeType":"147","messageId":"148","endLine":5,"endColumn":23},{"ruleId":"145","severity":1,"message":"178","line":3,"column":31,"nodeType":"147","messageId":"148","endLine":3,"endColumn":42},{"ruleId":"145","severity":1,"message":"169","line":3,"column":44,"nodeType":"147","messageId":"148","endLine":3,"endColumn":51},{"ruleId":"145","severity":1,"message":"173","line":4,"column":3,"nodeType":"147","messageId":"148","endLine":4,"endColumn":9},{"ruleId":"145","severity":1,"message":"182","line":6,"column":3,"nodeType":"147","messageId":"148","endLine":6,"endColumn":9},{"ruleId":"156","severity":1,"message":"183","line":76,"column":6,"nodeType":"158","endLine":76,"endColumn":37,"suggestions":"184"},{"ruleId":"145","severity":1,"message":"182","line":5,"column":3,"nodeType":"147","messageId":"148","endLine":5,"endColumn":9},{"ruleId":"145","severity":1,"message":"176","line":7,"column":3,"nodeType":"147","messageId":"148","endLine":7,"endColumn":8},{"ruleId":"145","severity":1,"message":"185","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":27},{"ruleId":"145","severity":1,"message":"186","line":1,"column":42,"nodeType":"147","messageId":"148","endLine":1,"endColumn":50},{"ruleId":"145","severity":1,"message":"187","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":29},{"ruleId":"156","severity":1,"message":"183","line":70,"column":6,"nodeType":"158","endLine":70,"endColumn":39,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":108,"column":9,"nodeType":"191","endLine":108,"endColumn":35},{"ruleId":"189","severity":1,"message":"190","line":114,"column":9,"nodeType":"191","endLine":114,"endColumn":35},{"ruleId":"145","severity":1,"message":"176","line":6,"column":3,"nodeType":"147","messageId":"148","endLine":6,"endColumn":8},{"ruleId":"145","severity":1,"message":"182","line":7,"column":3,"nodeType":"147","messageId":"148","endLine":7,"endColumn":9},{"ruleId":"145","severity":1,"message":"192","line":9,"column":3,"nodeType":"147","messageId":"148","endLine":9,"endColumn":11},{"ruleId":"145","severity":1,"message":"193","line":11,"column":3,"nodeType":"147","messageId":"148","endLine":11,"endColumn":8},{"ruleId":"145","severity":1,"message":"194","line":12,"column":3,"nodeType":"147","messageId":"148","endLine":12,"endColumn":6},{"ruleId":"189","severity":1,"message":"190","line":29,"column":5,"nodeType":"191","endLine":29,"endColumn":8},{"ruleId":"195","severity":1,"message":"196","line":77,"column":9,"nodeType":"191","endLine":89,"endColumn":11},"@typescript-eslint/no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","no-native-reassign",["197"],"no-negated-in-lhs",["198"],"'PrivateRoute' is defined but never used.","'useMutation' is defined but never used.","'LOGIN_MUTATION' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["199"],["200"],"'key' is assigned a value but never used.","'FormEvent' is defined but never used.","'Dimmer' is defined but never used.","'FormProps' is defined but never used.","React Hook useEffect has missing dependencies: 'postId' and 'retrieveComments'. Either include them or remove the dependency array.",["201"],"'useLazyQuery' is defined but never used.","'useCallback' is defined but never used.","'Segment' is defined but never used.","React Hook useEffect has a missing dependency: 'checkPagination'. Either include it or remove the dependency array.",["202"],"'Link' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'Icon' is defined but never used.","'Image' is defined but never used.","'MenuItemProps' is defined but never used.","'Placeholder' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'IS_AUTH_QUERY' is defined but never used.","'Header' is defined but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["203"],"'ApolloQueryResult' is defined but never used.","'useQuery' is defined but never used.","'RETRIEVE_USER_QUERY' is defined but never used.",["204"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'TextArea' is defined but never used.","'Input' is defined but never used.","'Ref' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"205","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [register]",{"range":"216","text":"217"},{"range":"218","text":"217"},"Update the dependencies array to be: [postId, retrieveComments]",{"range":"219","text":"220"},"Update the dependencies array to be: [checkPagination]",{"range":"221","text":"222"},"Update the dependencies array to be: [authContext.me, data, data.upvotes]",{"range":"223","text":"224"},"Update the dependencies array to be: [authContext.me, data, data.followers]",{"range":"225","text":"226"},[1146,1148],"[register]",[1351,1353],[1966,1968],"[postId, retrieveComments]",[1029,1031],"[checkPagination]",[1763,1794],"[authContext.me, data, data.upvotes]",[1883,1916],"[authContext.me, data, data.followers]"]